/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2022-04-07 22:52:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class best_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- Slick 불러오기 -->\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css\">\r\n");
      out.write("<style>\r\n");
      out.write("\t.name {width:150px; font-size:15; color:white;}\r\n");
      out.write("</style>\r\n");
      out.write("<!-- stlye 은 slick 영역 확인용 -->\r\n");
      out.write("<div style=\"padding:50px 50px; width:850px; height:300px; background-color:skyblue;\">\r\n");
      out.write("   <div id=\"slider-div\"></div>\r\n");
      out.write("   <script id=\"temp\" type=\"text/x-handlebars-template\">\r\n");
      out.write("   \t\t\t{{#each .}}\r\n");
      out.write("   \t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t<img src=\"/display?fileName={{image}}\" width=210 height=180>\r\n");
      out.write("\t\t\t\t\t<p>{{price}}</p>\r\n");
      out.write("\t\t\t\t\t<p class=\"ellipsis name\">{{title}}</p>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("   \t\t\t{{/each}}\r\n");
      out.write("   </script>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    $.ajax({\r\n");
      out.write("    \ttype:\"get\",\r\n");
      out.write("    \turl:\"/product/best.json\",\r\n");
      out.write("    \tdataType:\"json\",\r\n");
      out.write("    \tsuccess:function(data){\r\n");
      out.write("    \t\t//destroy();\r\n");
      out.write("    \t\tvar template = Handlebars.compile($(\"#temp\").html());\r\n");
      out.write("    \t\t$(\"#slider-div\").html(template(data));\t\r\n");
      out.write("    \t\tapply();\r\n");
      out.write("    \t}\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    function destroy() {\r\n");
      out.write("\t    if ($('#slider-div').hasClass('slick-initialized')) {\r\n");
      out.write("\t        $('#slider-div').slick('unslick');\r\n");
      out.write("\t    }\r\n");
      out.write("\t}\r\n");
      out.write("    \r\n");
      out.write("    function apply() {\r\n");
      out.write("        $('#slider-div').slick({\r\n");
      out.write("            slide : 'div',  //슬라이드 되어야 할 태그 ex) div, li \r\n");
      out.write("            infinite : true,  //무한 반복 옵션\r\n");
      out.write("            slidesToShow :4,  // 한 화면에 보여질 컨텐츠 개수\r\n");
      out.write("            slidesToScroll : 1,  //스크롤 한번에 움직일 컨텐츠 개수\r\n");
      out.write("            speed : 100,  // 다음 버튼 누르고 다음 화면 뜨는데까지 걸리는 시간(ms)\r\n");
      out.write("            arrows : true,  // 옆으로 이동하는 화살표 표시 여부\r\n");
      out.write("            dots : true,  // 스크롤바 아래 점으로 페이지네이션 여부\r\n");
      out.write("            autoplay : true,  // 자동 스크롤 사용 여부\r\n");
      out.write("            autoplaySpeed : 10000,  // 자동 스크롤 시 다음으로 넘어가는데 걸리는 시간 (ms)\r\n");
      out.write("            pauseOnHover : true,  // 슬라이드 이동    시 마우스 호버하면 슬라이더 멈추게 설정\r\n");
      out.write("            vertical : false,  // 세로 방향 슬라이드 옵션\r\n");
      out.write("            prevArrow : \"<button type='button' class='slick-prev'>Previous</button>\",  // 이전 화살표 모양 설정\r\n");
      out.write("            nextArrow : \"<button type='button' class='slick-next'>Next</button>\",  // 다음 화살표 모양 설정\r\n");
      out.write("            dotsClass : \"slick-dots\",  //아래 나오는 페이지네이션(점) css class 지정\r\n");
      out.write("            draggable : true,  //드래그 가능 여부 \r\n");
      out.write("\r\n");
      out.write("            // 반응형 웹구현 옵션\r\n");
      out.write("            responsive : [\r\n");
      out.write("                {\r\n");
      out.write("                    breakpoint : 960,  //화면 사이즈 960px\r\n");
      out.write("                    settings : { slidesToShow : 3 }  //위에 옵션이 디폴트 , 여기에 추가하면 그걸로 변경\r\n");
      out.write("                },\r\n");
      out.write("                {\r\n");
      out.write("                    breakpoint : 768,  //화면 사이즈 768px\r\n");
      out.write("                    settings : { slidesToShow : 2 }  //위에 옵션이 디폴트 , 여기에 추가하면 그걸로 변경\r\n");
      out.write("                }\r\n");
      out.write("            ]\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
